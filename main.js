#!/usr/bin/env node

const shell = require('shelljs');
const open = require('open');

function fatalError(message) {
  shell.echo(`‚ùå –û—à–∏–±–∫–∞: ${message}`);
  process.exit(1);
}

function showOperation(name) {
  shell.echo(` ‚Ä¢ ${name}`);
}

function extractTaskNumber(val) {
  const regex = /[A-Z0-9]+-\d+/;
  const match = val.match(regex);

  if (match) {
    return match[0];
  }

  fatalError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏')
}

function extractPullRequestNumber(val) {
  const regex = /#(\d+)/;
  const match = val.match(regex);

  if (match) {
    return match[1];
  }

  fatalError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä PR')
}

function extractPullRequestName(val) {
  const regex = /-\d+\s\|\s(.+)$/;
  const match = val.match(regex);

  if (match) {
    return match[1];
  }

  fatalError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ PR')
}

function checkReleaseVersion(val) {
  const regex = /^\d+\.\d+$/;
  if(!regex.test(val)){
    fatalError('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–ª–∏–∑–∞')
  }
}

function parseCommitUrl(url) {
  const regex = /(.*)\/projects\/(.*?)\/repos\/(.*?)\/commits\/(.*?)(\/|$)/;
  const match = url.match(regex);

  if (match) {
    return {
      url: match[1],
      project: match[2],
      repo: match[3],
      commit: match[4]
    };
  }

  fatalError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–º–∏—Ç')
}

function main() {
  const commitUrl = process.argv[2];
  const releaseVersion = (process.argv[3] || '').replace(/\.x$/, '').replace(/^release\//, '');

  checkReleaseVersion(releaseVersion);

  const {
    url,
    project,
    repo,
    commit
  } = parseCommitUrl(commitUrl);

  const folderName = `__chpicker__${repo}`

  shell.rm('-rf', folderName);

  showOperation('–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è')
  if (shell.exec(`git clone ${url}/scm/${project}/${repo}.git ${folderName}`, {silent: true}).code !== 0) {
    shell.echo('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
    shell.exit(1);
  }

  shell.cd(folderName);

  showOperation('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ç–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞')
  if (shell.exec('git fetch --all', {silent: true}).code !== 0) {
    fatalError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ç–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞')
  }

  const commitName = shell.exec(`git show --pretty=format:"%s" -s ${commit}`, {silent: true}).stdout;

  const taskNumber = extractTaskNumber(commitName);
  const pullRequestNumber = extractPullRequestNumber(commitName);
  const pullRequestName = extractPullRequestName(commitName).replaceAll('"', "'");

  const cherryPickBranchName = `cherrypick/${taskNumber}_${releaseVersion}.x`;
  const releaseBranchName = `release/${releaseVersion}.x`;

  showOperation(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ç–∫—É ${releaseBranchName}`)
  if (shell.exec(`git switch -c ${releaseBranchName} origin/${releaseBranchName}`, {silent: true}).code !== 0) {
    fatalError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É ${releaseBranchName}`)
  }

  showOperation(`–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç –Ω–µ—ë –≤–µ—Ç–∫–∏ ${cherryPickBranchName}`)
  if (shell.exec(`git checkout -b ${cherryPickBranchName}`, {silent: true}).code !== 0) {
    fatalError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É ${cherryPickBranchName}`)
  }

  showOperation('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ cherry-pick')
  if (shell.exec(`git cherry-pick -n ${commit}`, {silent: true}).code !== 0) {
    fatalError('Cherry-pick –Ω–µ —É–¥–∞–ª—Å—è. –í–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä—É—á–Ω—É—é!')
  }

  showOperation('–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π')
  if (shell.exec(`git add .`, {silent: true}).code !== 0 || shell.exec(`git commit -m "${taskNumber} | üçí ${releaseVersion}.x | ${pullRequestName}" -m "Pull request #${pullRequestNumber}"`, {silent: true}).code !== 0) {
    fatalError('Cherry-pick –Ω–µ —É–¥–∞–ª—Å—è. –í–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—Ä—É—á–Ω—É—é!')
  }

  showOperation('Push –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä')
  if (shell.exec(`git push origin ${cherryPickBranchName}`, {silent: true}).code !== 0) {
    fatalError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å push')
  }

  showOperation(`–£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–æ–¥–æ–º`)
  shell.cd('..');
  shell.rm('-rf', folderName);

  showOperation('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è PR...');
  open(`${url}/projects/${project}/repos/${repo}/pull-requests?create&sourceBranch=${encodeURIComponent(`refs/heads/${cherryPickBranchName}`)}&targetBranch=${encodeURIComponent(`refs/heads/${releaseBranchName}`)}`);
}

main();